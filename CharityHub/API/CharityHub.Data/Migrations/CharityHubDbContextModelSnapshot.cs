// <auto-generated />
using System;
using CharityHub.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharityHub.Data.Migrations
{
    [DbContext(typeof(CharityHubDbContext))]
    partial class CharityHubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CharityHub.Data.Models.AdminActions", b =>
                {
                    b.Property<Guid>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TargetCampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TargetUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActionId");

                    b.HasIndex("AdminId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("TargetCampaignId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("AdminActions");

                    b.HasData(
                        new
                        {
                            ActionId = new Guid("fe17465a-d9ae-4e41-b33f-f7b7996ec5f2"),
                            ActionType = "BanUser",
                            AdminId = new Guid("e3622868-08c1-487d-924d-5d184977979f"),
                            CompletedAt = new DateTime(2024, 8, 21, 11, 50, 57, 454, DateTimeKind.Local).AddTicks(5384),
                            TargetCampaignId = new Guid("9153c19f-9369-421c-bf79-9e50eadc50ef"),
                            TargetUserId = new Guid("ec6ed7ea-7e70-4d45-8926-f4c97af48ee6")
                        });
                });

            modelBuilder.Entity("CharityHub.Data.Models.Campaign", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CampaignCode")
                        .HasColumnType("int");

                    b.Property<string>("CampaignDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CampaignStatus")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("CampaignThumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("CampaignTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PartnerLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("PartnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PartnerNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TargetAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("CampaignId");

                    b.ToTable("Campaigns");

                    b.HasData(
                        new
                        {
                            CampaignId = new Guid("9153c19f-9369-421c-bf79-9e50eadc50ef"),
                            CampaignCode = 123,
                            CampaignDescription = "This is a charity campaign.",
                            CampaignStatus = "InProgress",
                            CampaignThumbnail = "path/to/thumbnail.jpg",
                            CampaignTitle = "Charity Campaign",
                            CurrentAmount = 5000.00m,
                            DateCreated = new DateTime(2024, 8, 21, 11, 50, 57, 454, DateTimeKind.Local).AddTicks(5380),
                            EndDate = new DateTime(2024, 9, 21, 11, 50, 57, 454, DateTimeKind.Local).AddTicks(5306),
                            PartnerLogo = "path/to/logo.jpg",
                            PartnerName = "Partner Organization",
                            PartnerNumber = "0987654321",
                            StartDate = new DateTime(2024, 8, 21, 11, 50, 57, 454, DateTimeKind.Local).AddTicks(5283),
                            TargetAmount = 10000.00m
                        });
                });

            modelBuilder.Entity("CharityHub.Data.Models.Donation", b =>
                {
                    b.Property<Guid>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateDonated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DonationId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("Donations");

                    b.HasData(
                        new
                        {
                            DonationId = new Guid("d7fc5fd3-b68c-4bf9-9714-0f93d2b07d26"),
                            Amount = 100.00m,
                            CampaignId = new Guid("9153c19f-9369-421c-bf79-9e50eadc50ef"),
                            DateDonated = new DateTime(2024, 8, 21, 11, 50, 57, 454, DateTimeKind.Local).AddTicks(5390),
                            IsConfirm = true,
                            PaymentMethod = "Paypal",
                            UserId = new Guid("ec6ed7ea-7e70-4d45-8926-f4c97af48ee6")
                        });
                });

            modelBuilder.Entity("CharityHub.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("af3e6bc9-eae2-4c8f-af73-1b7107a3f2e8"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("7c81c2a0-ef77-4ce6-bff0-4d92fdc19f43"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("CharityHub.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec6ed7ea-7e70-4d45-8926-f4c97af48ee6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdf53da0-3971-4936-9384-dd46c5f16ef5",
                            DateCreated = new DateTime(2024, 8, 21, 11, 50, 57, 344, DateTimeKind.Local).AddTicks(6971),
                            Email = "datdq@gmail.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LastLoginDate = new DateTime(2024, 8, 21, 11, 50, 57, 344, DateTimeKind.Local).AddTicks(6984),
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEINtnyn8Tx9rU/buxARkmbHBm9DqSvP7DezQCtyrWW5UFHvl2hgwZXHQZgBbAen0YA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "datdq@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("e3622868-08c1-487d-924d-5d184977979f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52e01fd4-e40b-41f7-9299-c111f2e1d90c",
                            DateCreated = new DateTime(2024, 8, 21, 11, 50, 57, 399, DateTimeKind.Local).AddTicks(7216),
                            Email = "Anv@gmail.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LastLoginDate = new DateTime(2024, 8, 21, 11, 50, 57, 399, DateTimeKind.Local).AddTicks(7238),
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHd+rS9Vn2X5rtUeNZFTs9bUKhzWq8c9Ty1a07/jHiZFpzYRbJRJZMLZFXo/h4/u5A==",
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Anv@gmail.com"
                        });
                });

            modelBuilder.Entity("CharityHub.Data.Models.UserFollows", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateFollowed")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "CampaignId");

                    b.HasIndex("CampaignId");

                    b.ToTable("UserFollows");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("ec6ed7ea-7e70-4d45-8926-f4c97af48ee6"),
                            CampaignId = new Guid("9153c19f-9369-421c-bf79-9e50eadc50ef"),
                            DateFollowed = new DateTime(2024, 8, 21, 11, 50, 57, 454, DateTimeKind.Local).AddTicks(5392),
                            IsNotified = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("ec6ed7ea-7e70-4d45-8926-f4c97af48ee6"),
                            RoleId = new Guid("af3e6bc9-eae2-4c8f-af73-1b7107a3f2e8")
                        },
                        new
                        {
                            UserId = new Guid("e3622868-08c1-487d-924d-5d184977979f"),
                            RoleId = new Guid("7c81c2a0-ef77-4ce6-bff0-4d92fdc19f43")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CharityHub.Data.Models.AdminActions", b =>
                {
                    b.HasOne("CharityHub.Data.Models.User", "Admin")
                        .WithMany("AdminActions")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CharityHub.Data.Models.Campaign", null)
                        .WithMany("AdminActions")
                        .HasForeignKey("CampaignId");

                    b.HasOne("CharityHub.Data.Models.Campaign", "TargetCampaign")
                        .WithMany()
                        .HasForeignKey("TargetCampaignId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CharityHub.Data.Models.User", "TargetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Admin");

                    b.Navigation("TargetCampaign");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("CharityHub.Data.Models.Donation", b =>
                {
                    b.HasOne("CharityHub.Data.Models.Campaign", "Campaign")
                        .WithMany("Donations")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharityHub.Data.Models.User", "User")
                        .WithMany("Donations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CharityHub.Data.Models.UserFollows", b =>
                {
                    b.HasOne("CharityHub.Data.Models.Campaign", "Campaign")
                        .WithMany("UserFollows")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharityHub.Data.Models.User", "User")
                        .WithMany("UserFollows")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CharityHub.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CharityHub.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CharityHub.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CharityHub.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharityHub.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CharityHub.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharityHub.Data.Models.Campaign", b =>
                {
                    b.Navigation("AdminActions");

                    b.Navigation("Donations");

                    b.Navigation("UserFollows");
                });

            modelBuilder.Entity("CharityHub.Data.Models.User", b =>
                {
                    b.Navigation("AdminActions");

                    b.Navigation("Donations");

                    b.Navigation("UserFollows");
                });
#pragma warning restore 612, 618
        }
    }
}
